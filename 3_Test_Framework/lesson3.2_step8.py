def test_input_text(expected_result, actual_result):

    # ваша реализация, напишите assert и сообщение об ошибке
	assert aexpected_result(8) == 8

	assert actual_result(11) == 11

	f"Wrong text, got {actual_result}, something wrong"
	# f"expected {aexpected_result}, got {actual_result}"



# f"Wrong text, got {actual_result}, something wrong"


# def avg(marks):
#     assert len(marks) != 0,"List is empty."
#     return sum(marks)/len(marks)

# mark2 = [55,88,78,90,79]
# print("Average of mark2:",avg(mark2))

# mark1 = []
# print("Average of mark1:",avg(mark1))





# "Let's count together! {}, then goes {}, and then {}".format("one", "two", "three")














# Задание: составные сообщения об ошибках
# Для закрепления материала реализуйте проверку самостоятельно. 

# Вам дана функция test_input_text,  которая принимает два значения: expected_result - ожидаемый результат, и actual_result - фактический результат. 

# Функция должна проверить совпадение значений с помощью оператора assert и, в случае несовпадения, предоставить исчерпывающее сообщение об ошибке. 

# Важно! Формат ошибки должен точно совпадать с приведенным в примере, чтобы его засчитала проверяющая система! 

# Маленький совет: попробуйте воспользоваться кнопкой "Запустить код" и протестируйте ваш код на разных введенных значениях, проверьте вывод вашей функции на разных парах. Обрабатывать ситуацию с пустым или невалидным вводом не нужно. 

# Sample Input:
# 8 11

# Sample Output:
# expected 8, got 11

# Time Limit: 15 seconds
# Memory Limit: 256 MB

#def test_input_text(expected_result, actual_result):
    # ваша реализация, напишите assert и сообщение об ошибке



# Это задание просто капец какой-то, без стакана фиг разберёшься что конкретно нужно делать. Все кто не понимает, что происходит не сдавайтесь. В комментах есть подсказки. + когда отправите на проверку вам будет написано что не так в вашем ответе. И даже если с виду ответы совпадают это не значит что совпадают. Может быть пробел в тексте ассерта где-то не там поставили. Используйте сложносоставной ассерт из прошлого примера, а не обычный из позапрошлого. Вроде всё написал) Удачи вам.

# реализуйте все в  def + # ваша реализация, напишите assert и сообщение об ошибке(Буквально!!!)

#  написать assert, нужное сравнение аргументов, и адекватное сообщение об ошибке 

#  потому что отступы являются частью синтаксиса python. Ассерт без отступов = ассерт вне функции 


# в последнем решении вашем вы сравниваете фиксированные строки между собой, а надо сравнивать переменные аргументы функции

# все отлично на 99%, вам только не нужно считывать никакой текст) 

# у вас assert строки. Нужно сделать assert какого-то выражения, которое может быть True/False и через запятую само сообщение. Сообщение выглядит правильным 