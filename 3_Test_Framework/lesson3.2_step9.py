Задание: составные сообщения об ошибках и поиск подстроки
Иногда при работе с текстами не нужны жёсткие проверки на полное совпадение, и требуется проверить, что некий текст является подстрокой другого текста. Это можно сделать либо с помощью ключевого слова in, либо с помощью функции find:

s = 'My Name is Julia'

if 'Name' in s:
    print('Substring found')

index = s.find('Name')
if index != -1:
    print('Substring found at index {}'.format(index))
Попробуйте запустить этот код в интерпретаторе, чтобы понять разницу в подходах.

Конструкция 'Name' in s возвращает просто True или False, a find() возвращает индекс первого вхождения подстроки в строку и -1, если подстрока не найдена. Обычно в автотестах достаточно использовать in, потому что это более читабельный вариант.

Например, для проверки того, что в текущем url содержится строка login: 

assert "login" in browser.current_url, # сообщение об ошибке
Реализуйте подобную проверку самостоятельно. 

Вам дан шаблон для функции test_substring, которая принимает два значения: full_string и substring. 

Функция должна проверить вхождение строки substring в строку full_string с помощью оператора assert и, в случае несовпадения, предоставить исчерпывающее сообщение об ошибке. 

Важно! Формат ошибки должен точно совпадать с приведенным в примере, чтобы его засчитала проверяющая система! 

Маленький совет: попробуйте воспользоваться кнопкой "Запустить код" и протестируйте ваш код на разных введенных значениях, проверьте вывод вашей функции на разных парах. Обрабатывать ситуацию с пустым или невалидным вводом не нужно. 


Sample Input:
fulltext some_value

Sample Output:
expected 'some_value' to be substring of 'fulltext'


Программирование — Напишите программу. Тестируется через stdin → stdout


Time Limit: 15 seconds
Memory Limit: 256 MB


def test_substring(full_string, substring):
    # ваша реализация, напишите assert и сообщение об ошибке






Могу посоветовать использовать not in

если контаминацией, то просто оставить кавычки в блоках текста до и после переменной. Если через f, то взять в кавычки фигурные скобочки

смею дополнить) через f лучше взять строку в двойные кавычки, а фигурные скобки в одинарные. Ну или же использовать экранирование (\')

не пишите пожалуйста код в комментариях :) Ваша  ошибка в том что вы сравниваете  'full_string' и 'substring', а это строки. Нужно сравнивать переменные из аргументов функции 


Я проверила на входных данных Mynameis somebody, результат:

expected 'somebody' to be substring of 'Mynameis'

 сообщение правильное, но у вас неверное выражение написано в assert. Нужно переменные сравнивать, а вы фиксированные строки сравниваете :)

Я в шоке) Успешных решений: 38% 

Почему у людей возникает трудность поменять == на is?)) ну и поменять местами аргументы... 

Я учил курс Learn Python the Hard Way, покупал на странице автора(Zed Shaw). У него к 4 июля скидки бывают, кстати. Отличный курс, для тестировщика более чем достаточно. Самое важное, он учит понимать что перед вами происходит, а не тупо подставлять значения, предложенные IDE. Упражнения простые, знать математику (для меня это больная тема, я троечник) не нужно - весь курс направлен именно на знание языка, а не на "как решить задачку про числа Фибоначчи".
только там не is, а in
